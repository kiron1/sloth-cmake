#
# SlothTools.cmake - Cmake Tool functions.
#

#=============================================================================
# Copyright (C) 2013 Kiron
#
# Distributed under the Boost Software License, Version 1.0.
# See accompanying file LICENSE_1_0.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt
#=============================================================================

function(sloth_split_library_list _debug_var _optimized_var)
  set(_debug)
  set(_optimized)
  set(_key "")
  foreach(_word IN LISTS ARGN)
    if(_word STREQUAL "debug" OR _word STREQUAL "optimized")
      set(_key ${_word})
    elseif(_word STREQUAL "general")
      set(_key "")
    elseif(_key STREQUAL "debug")
      list(APPEND _debug "${_word}")
      set(_key "")
    elseif(_key STREQUAL "optimized")
      list(APPEND _optimized "${_word}")
      set(_key "")
    else()
      list(APPEND _debug "${_word}")
      list(APPEND _optimized "${_word}")
      set(_key "")
    endif()
  endforeach()
  set(${_debug_var} ${_debug} PARENT_SCOPE)
  set(${_optimized_var} ${_optimized} PARENT_SCOPE)
endfunction()

function(sloth_library_list_expression _var)
  set(_libs)
  sloth_split_library_list(_debug_libs _optimized_libs ${ARGN})
  foreach(_dbglib IN LISTS _debug_libs)
    list(APPEND _libs $<$<CONFIG:DEBUG>:${_dbglib}>)
  endforeach()
  foreach(_optlib IN LITS _optimized_libs)
    list(APPEND _libs $<$<NOT:$<CONFIG:DEBUG>>:${_optlib}>)
  endforeach()
  set(${_var} ${_libs} PARENT_SCOPE)
endfunction()

function(sloth_collect_property _var _name _scope)
  set(_values)
  foreach(_obj IN LISTS ARGN)
    get_property(_val ${_scope} ${_obj} PROPERTY ${_name})
    list(APPEND _values ${_val})
  endforeach()
  set(${_var} ${_values} PARENT_SCOPE)
endfunction()

function(sloth_set_iff _var)
  set(_a IN LISTS ARGN)
  list(GET _a -2 _yes)
  list(GET _a -1 _no)
  list(REMOVE_AT _a -1 -2)
  if(${_a})
    set(${_var} ${_yes} PARENT_SCOPE)
  else()
    set(${_var} ${_no} PARENT_SCOPE)
  endif()
endfunction()

function(sloth_list_match _var _expr)
  foreach(_s IN LISTS ARGN)
    if("${_s}" MATCHES "${_expr}")
      list(APPEND _lst "${_s}")
    endif()
  endforeach()
  set(${_var} ${_lst} PARENT_SCOPE)
endfunction()

function(sloth_list_replace _var _expr _repl)
  foreach(_s IN LISTS ARGN)
    string(REGEX REPLACE "${_expr}" "${_repl}" _res ${_s})
    list(APPEND _lst "${_res}")
  endforeach()
  set(${_var} ${_lst} PARENT_SCOPE)
endfunction()

function(sloth_list_string _var _cmd)
  foreach(_s IN LISTS ARGN)
    string("${_cmd}" ${_s} _res)
    list(APPEND _lst "${_res}")
  endforeach()
  set(${_var} ${_lst} PARENT_SCOPE)
endfunction()

function(sloth_list_filename_component _var _comp)
  foreach(_s IN LISTS ARGN)
    if(_s MATCHES "\\s*\\\$<.*>\\s*")
      # ignore generator expressions
      list(APPEND _lst "${_s}")
    else()
      get_filename_component(_res ${_s} "${_comp}")
      list(APPEND _lst "${_res}")
    endif()
  endforeach()
  set(${_var} ${_lst} PARENT_SCOPE)
endfunction()

function(sloth_target_group _group)
  set_property(GLOBAL PROPERTY USE_FOLDERS ON)
  foreach(_target IN LISTS ARGN)
    if(TARGET "${_target}")
      set_target_properties("${_target}" PROPERTIES FOLDER "${_group}")
    endif()
  endforeach()
endfunction()

