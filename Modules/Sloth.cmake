#
# Sloth.cmake - The main include file for the Sloth CMake library.
#

#=============================================================================
# Copyright (C) 2013 Kiron
#
# Distributed under the Boost Software License, Version 1.0.
# See accompanying file LICENSE_1_0.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt
#=============================================================================

if(_SLOTH_CMAKE_INCLUDED)
  return()
endif()
set(_SLOTH_CMAKE_INCLUDED 1)

include(FeatureSummary)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")

set(SLOTH_RESOUCES_DIR "${CMAKE_CURRENT_LIST_DIR}/../Resources")

include("${CMAKE_CURRENT_LIST_DIR}/SlothTools.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/SlothConfigure.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/SlothAddTarget.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/SlothPackage.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/SlothRemote.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/SlothDoxygen.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/SlothDump.cmake")

function(sloth_project_impl _argsout _reqsout _name)
  set_property(GLOBAL APPEND PROPERTY SLOTH_PROJECTS "${_name}")

  set(_state NEUTRAL)
  set(_version)
  set(_compat)
  set(_namespace)
  set(_args)
  foreach(_word ${ARGN})
    if(_state STREQUAL "NEUTRAL" AND _word MATCHES "(VERSION|COMPATIBILITY|NAMESPACE|REQUIRES)")
      set(_state "${CMAKE_MATCH_1}")
    elseif(_state STREQUAL "NEUTRAL")
      list(APPEND _args ${_word})
    elseif(_state STREQUAL "VERSION")
      set(_state "NEUTRAL")
      set(_version ${_word})
    elseif(_state STREQUAL "COMPATIBILITY")
      set(_state "NEUTRAL")
      set(_compat ${_word})
    elseif(_state STREQUAL "NAMESPACE")
      set(_state "NEUTRAL")
      set(_namespace ${_word})
    elseif(_state STREQUAL "REQUIRES")
      # does not go back to state neutral
      list(APPEND _reqs ${_word})
    endif()
  endforeach()

  set(${_argsout} ${_args} PARENT_SCOPE)
  set(${_reqsout} ${_reqs} PARENT_SCOPE)

  if(_namespace)
    set(${_name}_NAMESPACE ${_namespace} PARENT_SCOPE)
  endif()

  if(_reqs)
    set(${_name}_REQUIRES ${_reqs} PARENT_SCOPE)
  endif()

  set(_have_version 0)
  if(_version MATCHES "([0-9]+).*")
    set(_have_version 1)
    set(_major "${CMAKE_MATCH_1}")
    if(_version MATCHES "[0-9]+\\.([0-9]+).*")
      set(_minor "${CMAKE_MATCH_1}")
      if(_version MATCHES "[0-9]+\\.[0-9]+\\.([0-9]+).*")
        set(_patch "${CMAKE_MATCH_1}")
        if(_version MATCHES "[0-9]+\\.[0-9]+\\.[0-9]+_([0-9]+).*")
          set(_tweak "${CMAKE_MATCH_1}")
        endif()
      endif()
    endif()
  endif()

  if(_have_version)
    if(NOT _compat)
      set(_compat "ExactVersion")
    endif()
    set(${_name}_COMPATIBILITY "${_compat}" PARENT_SCOPE)
    set(${_name}_VERSION_STRING "${_version}" PARENT_SCOPE)
    if(DEFINED _major AND DEFINED _minor AND DEFINED _patch AND DEFINED _tweak)
      set(${_name}_VERSION_MAJOR "${_major}" PARENT_SCOPE)
      set(${_name}_VERSION_MINOR "${_minor}" PARENT_SCOPE)
      set(${_name}_VERSION_PATCH "${_patch}" PARENT_SCOPE)
      set(${_name}_VERSION_TWEAK "${_tweak}" PARENT_SCOPE)
      set(${_name}_VERSION_COUNT "4" PARENT_SCOPE)
      set(${_name}_VERSION "${_major}.${_minor}.${_patch}_${_tweak}" PARENT_SCOPE)
    elseif(DEFINED _major AND DEFINED _minor AND DEFINED _patch)
      set(${_name}_VERSION_MAJOR "${_major}" PARENT_SCOPE)
      set(${_name}_VERSION_MINOR "${_minor}" PARENT_SCOPE)
      set(${_name}_VERSION_PATCH "${_patch}" PARENT_SCOPE)
      set(${_name}_VERSION_TWEAK "0" PARENT_SCOPE)
      set(${_name}_VERSION_COUNT "3" PARENT_SCOPE)
      set(${_name}_VERSION "${_major}.${_minor}.${_patch}" PARENT_SCOPE)
    elseif(DEFINED _major AND DEFINED _minor)
      set(${_name}_VERSION_MAJOR "${_major}" PARENT_SCOPE)
      set(${_name}_VERSION_MINOR "${_minor}" PARENT_SCOPE)
      set(${_name}_VERSION_PATCH "0" PARENT_SCOPE)
      set(${_name}_VERSION_TWEAK "0" PARENT_SCOPE)
      set(${_name}_VERSION_COUNT "2" PARENT_SCOPE)
      set(${_name}_VERSION "${_major}.${_minor}" PARENT_SCOPE)
    elseif(DEFINED _major)
      set(${_name}_VERSION_MAJOR "${_major}" PARENT_SCOPE)
      set(${_name}_VERSION_MINOR "0" PARENT_SCOPE)
      set(${_name}_VERSION_PATCH "0" PARENT_SCOPE)
      set(${_name}_VERSION_TWEAK "0" PARENT_SCOPE)
      set(${_name}_VERSION_COUNT "1" PARENT_SCOPE)
      set(${_name}_VERSION "${_major}" PARENT_SCOPE)
    endif()
  endif()
endfunction()

macro(sloth_project _name)
  sloth_project_impl(SLOTH_PROJECT_ARGS SLOTH_PROJECT_REQUIRES ${_name} ${ARGN})
  project(${_name} ${SLOTH_PROJECT_ARGS})
  foreach(_req ${SLOTH_PROJECT_REQUIRES})
    find_package(${_req} REQUIRED CONFIG)
  endforeach()
  unset(SLOTH_PROJECT_ARGS)
  unset(SLOTH_PROJECT_REQUIRES)
endmacro()

function(sloth_finalize)
  if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
    set(_cflagslst)
    set(_cxxflagslst)
    if(CMAKE_C_FLAGS)
      string(REPLACE " " ";" _cflags "${CMAKE_C_FLAGS}")
      list(APPEND _cflagslst ${_cflags})
    endif()
    if(CMAKE_CXX_FLAGS)
      string(REPLACE " " ";" _cxxflags "${CMAKE_CXX_FLAGS}")
      list(APPEND _cxxflagslst ${_cxxflags})
    endif()
    if(CMAKE_BUILD_TYPE)
      string(TOUPPER ${CMAKE_BUILD_TYPE} _buildtype)
      if(CMAKE_C_FLAGS_${_buildtype})
        string(REPLACE " " ";" _cflags "${CMAKE_C_FLAGS_${_buildtype}}")
        list(APPEND _cflagslst ${_cflags})
      endif()
      if(CMAKE_CXX_FLAGS_${_buildtype})
        string(REPLACE " " ";" _cxxflags "${CMAKE_CXX_FLAGS_${_buildtype}}")
        list(APPEND _cxxflagslst ${_cxxflags})
      endif()
    endif()
    get_directory_property(_gcflags COMPILE_OPTIONS)
    if(_gcflags)
      list(APPEND _cflagslst ${_gcflags})
      list(APPEND _cxxflagslst ${_gcflags})
    endif()
    get_directory_property(_gdefs   COMPILE_DEFINITIONS)
    foreach(_def IN LISTS _gdefs)
      list(APPEND _cflagslst -D${_def})
      list(APPEND _cxxflagslst -D${_def})
    endforeach()
    site_name(_site_name)
    if(CMAKE_VERSION VERSION_GREATER 2.8.11)
        cmake_host_system_information(RESULT _logical_cores     QUERY NUMBER_OF_LOGICAL_CORES)
        cmake_host_system_information(RESULT _physical_cores    QUERY NUMBER_OF_PHYSICAL_CORES)
        cmake_host_system_information(RESULT _hostname          QUERY HOSTNAME)
        cmake_host_system_information(RESULT _fqdn              QUERY FQDN)
        cmake_host_system_information(RESULT _total_vmem        QUERY TOTAL_VIRTUAL_MEMORY)
        cmake_host_system_information(RESULT _available_vmem    QUERY AVAILABLE_VIRTUAL_MEMORY)
        cmake_host_system_information(RESULT _total_physmem     QUERY TOTAL_PHYSICAL_MEMORY)
        cmake_host_system_information(RESULT _available_physmem QUERY AVAILABLE_PHYSICAL_MEMORY)
        set(_sysinfo)
        set(_sysinfo "${_sysinfo} * Hostname:             ${_fqdn} ${_hostname} ${_site_name}\n")
        set(_sysinfo "${_sysinfo} * Logical cores:        ${_logical_cores}\n")
        set(_sysinfo "${_sysinfo} * Physical cores:       ${_physical_cores}\n")
        set(_sysinfo "${_sysinfo} * Virtual memory:       ${_available_vmem}/${_total_vmem} MiB\n")
        set(_sysinfo "${_sysinfo} * Physical memory:      ${_available_physmem}/${_total_physmem} MiB\n")
        set(_sysinfo "${_sysinfo}\n")
    else()
        set(_sysinfo)
    endif()

    set(_info "Build Summary:\n")
    set(_info "${_info} * CMake:                ${CMAKE_VERSION}\n")
    if(NOT CMAKE_HOST_SYSTEM STREQUAL CMAKE_SYSTEM)
      set(_info "${_info} * Host system:          ${CMAKE_HOST_SYSTEM}\n")
    endif()
    set(_info "${_info} * System:               ${CMAKE_SYSTEM}\n")
    if(CMAKE_CROSSCOMPILING)
      set(_info "${_info} * Crosscompiling:       ${CMAKE_CROSSCOMPILING}\n")
    endif()
    set(_info "${_info}\n")
    set(_info "${_info}${_sysinfo}")
    if(CMAKE_BUILD_TYPE)
      set(_info "${_info} * Build type:           ${CMAKE_BUILD_TYPE}\n")
      set(_info "${_info}\n")
    endif()
    if(CMAKE_C_COMPILER)
      set(_info "${_info} * C compiler:           ${CMAKE_C_COMPILER} (${CMAKE_C_COMPILER_ID})\n")
      if(_cflags)
        set(_info "${_info} * C compiler options:\n")
        foreach(_flag IN LISTS _cflagslst)
          set(_info "${_info}   - ${_flag}\n")
        endforeach()
      endif()
    endif()
    if(CMAKE_CXX_COMPILER)
      set(_info "${_info}\n")
      set(_info "${_info} * C++ compiler:         ${CMAKE_CXX_COMPILER} (${CMAKE_CXX_COMPILER_ID})\n")
      if(_cflags)
        set(_info "${_info} * C++ compiler options:\n")
        foreach(_flag IN LISTS _cxxflagslst)
          set(_info "${_info}   - ${_flag}\n")
        endforeach()
      endif()
    endif()

    message(STATUS ${_info})
    feature_summary(INCLUDE_QUIET_PACKAGES WHAT ALL)
  endif()
endfunction()

